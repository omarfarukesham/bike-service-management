// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  customerId    String   @id @default(uuid())
  name       String
  email      String   @unique
  phone      String   
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  bikes      Bike[]

  @@map("customers")
}

model Bike {
  bikeId      String   @id @default(uuid())
  brand       String
  model       String
  year        Int      
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customerId    String
  customer      Customer @relation(fields: [customerId], references: [customerId])
  services     ServiceRecord[]

  @@map("bikes")
}

model ServiceRecord {
  serviceId       String         @id @default(uuid())
  bikeId          String
  serviceDate     DateTime
  completionDate  DateTime?
  description     String
  status          ServiceStatus
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  bike            Bike           @relation(fields: [bikeId], references: [bikeId])

  @@map("service_records")
}

enum ServiceStatus {
  PENDING
  IN_PROGRESS
  DONE
}





// model User {
//   id                 String     @id @default(uuid())
//   email              String     @unique
//   password           String
//   role               UserRole
//   needPasswordChange Boolean    @default(true)
//   status             UserStatus @default(ACTIVE)
//   createdAt          DateTime   @default(now())
//   updatedAt          DateTime   @updatedAt
//   admin              Admin?


//   @@map("users")
// }

// model Admin {
//   id            String   @id @default(uuid())
//   name          String
//   email         String   @unique
//   profilePhoto  String?
//   contactNumber String
//   isDeleted     Boolean  @default(false)
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt

//   user User @relation(fields: [email], references: [email])

//   @@map("admins")
// }

// enum UserRole {
//   SUPER_ADMIN
//   ADMIN
//   DOCTOR
//   PATIENT
// }

// enum UserStatus {
//   ACTIVE
//   BLOCKED
//   DELETED
// }

// enum Gender {
//   MALE
//   FEMALE
// }